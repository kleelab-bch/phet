require(limma)
require(umap)
require(Seurat)
require(Matrix)
source("R:/GeneAnalysis/uhet/src/utility/create_sce.R")
working_dir <- file.path("R:/GeneAnalysis/data")
file_name <- "gse134174"
gset <- readRDS(file.path(working_dir, "GSE134174_Processed_invivo_seurat."))
gset <- readRDS(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
gset <- load(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
gset <- load_object(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
load_object <- function(file) {
tmp <- new.env()
load(file = file, envir = tmp)
tmp[[ls(tmp)[1]]]
}
gset <- load_object(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
# Montoro, D.T., Haber, A.L., Biton, M., Vinarsky, V., Lin, B., Birket, S.E., Yuan, F., Chen, S., Leung, H.M., Villoria, J. and Rogel, N., 2018. A revised airway epithelial hierarchy includes CFTR-expressing ionocytes. Nature, 560(7718), pp.319-324.
# Differential expression analysis with limma
require(limma)
require(umap)
require(Seurat)
require(Matrix)
source("R:/GeneAnalysis/uhet/src/utility/create_sce.R")
working_dir <- file.path("R:/GeneAnalysis/data")
file_name <- "gse134174"
gset <- load_object(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
gset@meta.data
View(gset@meta.data)
View(gset@version)
View(gset$nFeature_RNA)
View(gset)
gset@assays
gset@assays$RNA
gset@assays$RNA@meta.features
View(gset@assays$RNA@meta.features)
View(gset@assays$RNA@)
View(gset@assays$SCT)
View(gset@assays$RNA@counts)
gset@assays$RNA@counts@p
View(gset@assays$RNA@counts@p)
gset@assays$RNA@data
View(gset@assays$RNA@data)
gset@assays$RNA@data@p
View(gset@assays$RNA@data@p)
gset@assays$RNA@scale.data
gset@assays$RNA@data
View(gset@assays$RNA@data)
View(data.frame(gset@assays$RNA@data))
# gset <- load_object(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
gset <- read.delim(file.path(working_dir, "GSE134174_Processed_invivo_norm.txt"))
gset <- read.table(file.path(working_dir, paste("GSE134174_Processed_invitro_norm.txt",
sep = "")),
stringsAsFactors = F)
# Montoro, D.T., Haber, A.L., Biton, M., Vinarsky, V., Lin, B., Birket, S.E., Yuan, F., Chen, S., Leung, H.M., Villoria, J. and Rogel, N., 2018. A revised airway epithelial hierarchy includes CFTR-expressing ionocytes. Nature, 560(7718), pp.319-324.
# Differential expression analysis with limma
require(limma)
require(umap)
require(Seurat)
require(Matrix)
source("R:/GeneAnalysis/uhet/src/utility/create_sce.R")
working_dir <- file.path("R:/GeneAnalysis/data")
file_name <- "gse134174"
gset <- read.table(file.path(working_dir, paste("GSE134174_Processed_invitro_norm.txt",
sep = "")),
stringsAsFactors = F)
View(gset)
gset@Dimnames[[1]]
colnames(gset)
features <- rownames(gset)
View(gset)
View(gset)
gset <- NormalizeData(object = gset, normalization.method = "LogNormalize",
scale.factor = 10000, display.progress = TRUE)
colnames(gset)
View(gset)
gset@x
data.frame(gset@x)
View(data.frame(gset@x))
metadata <- read.delim(file.path(working_dir,
paste(file_name, "GSE134174_Processed_invitro_metadata.txt",
sep = "")))
metadata <- read.delim(file.path(working_dir,
paste(file_name, "GSE134174_Processed_invitro_metadata.txt",
sep = "")))
data_name <- "GSE134174_Processed_invitro"
metadata <- read.delim(file.path(working_dir,
paste(data_name, "_metadata.txt",
sep = "")))
View(metadata)
metadata$cell_type1 <- metadata$clust_ident
metadata$clust_ident <- NULL
donors <- metadata$donor
timepoints <- metadata$day
gset <- as.data.frame(gset)
View(gset)
gset <- readRDS(file.path(working_dir, "GSE103354_PulseSeq_UMI_counts.rds"))
# gset <- load_object(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
gset <- read.table(file.path(working_dir, paste(file_name, "_norm.txt",
sep = "")),
stringsAsFactors = F)
# Goldfarbmuren, K.C., Jackson, N.D., Sajuthi, S.P., Dyjack, N., Li, K.S., Rios, C.L., Plender, E.G., Montgomery, M.T., Everman, J.L., Bratcher, P.E. and Vladar, E.K., 2020. Dissecting the cellular specificity of smoking effects and reconstructing lineages in the human airway epithelium. Nature communications, 11(1), p.2485.
# Differential expression analysis with limma
require(limma)
require(umap)
require(Seurat)
require(Matrix)
source("R:/GeneAnalysis/uhet/src/utility/create_sce.R")
working_dir <- file.path("R:/GeneAnalysis/data")
file_name <- "GSE134174_Processed_invitro"
save_name <- "gse134174"
metadata <- read.delim(file.path(working_dir,
paste(file_name, "_metadata.txt",
sep = "")))
metadata$cell_type1 <- metadata$clust_ident
metadata$clust_ident <- NULL
donors <- metadata$donor
timepoints <- metadata$day
# gset <- load_object(file.path(working_dir, "GSE134174_Processed_invivo_seurat.Rdata"))
gset <- read.table(file.path(working_dir, paste(file_name, "_norm.txt",
sep = "")),
stringsAsFactors = F)
features <- rownames(gset)
View(gset)
metadata <- metadata$cell_type1
unique(metadata)
gsms <- c(0,0,1,0,1,0,1,1,1,1,1)
names(gsms) <- unique(metadata)
gsms <- gsms[metadata]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
save_name
# save subtypes
subtypes <- metadata
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
features
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(as.data.frame(donors),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(as.data.frame(timepoints),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
rownames(gset)
# save features data
rownames(gset) <- features
writeMM(gset, file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
# already normalized
gset <- as.data.frame.matrix(gset)
# already normalized
gset <- as.sparse(gset)
metadata <- read.delim(file.path(working_dir, paste(file_name, "_md.txt", sep = "")))
metadata$cell_type1 <- metadata$res.2_named
metadata$res.2_named <- NULL
donors <- metadata$mouse
timepoints <- metadata$timepoint
gset <- readRDS(file.path(working_dir, "GSE103354_PulseSeq_UMI_counts.rds"))
features <- gset@Dimnames[[1]]
gset <- NormalizeData(object = gset, normalization.method = "LogNormalize",
scale.factor = 10000, display.progress = TRUE)
colnames(gset)
rownames(metadata)
metadata
View(metadata)
### Load UMI count data from GEO
metadata <- read.delim(file.path(working_dir, paste(file_name, "_md.txt", sep = "")))
metadata$cell_type1 <- metadata$res.2_named
metadata$res.2_named <- NULL
donors <- metadata$mouse
timepoints <- metadata$timepoint
# Montoro, D.T., Haber, A.L., Biton, M., Vinarsky, V., Lin, B., Birket, S.E., Yuan, F., Chen, S., Leung, H.M., Villoria, J. and Rogel, N., 2018. A revised airway epithelial hierarchy includes CFTR-expressing ionocytes. Nature, 560(7718), pp.319-324.
working_dir <- file.path("R:/GeneAnalysis/data")
file_name <- "pulseseq"
### Load UMI count data from GEO
metadata <- read.delim(file.path(working_dir, paste(file_name, "_md.txt", sep = "")))
metadata$cell_type1 <- metadata$res.2_named
metadata$res.2_named <- NULL
donors <- metadata$mouse
timepoints <- metadata$timepoint
rownames(metadata)
require(limma)
require(umap)
require(Seurat)
require(Matrix)
source("R:/GeneAnalysis/uhet/src/utility/create_sce.R")
working_dir <- file.path("R:/GeneAnalysis/data")
file_name <- "GSE134174_Processed_invitro"
save_name <- "gse134174"
### Load data
metadata <- read.delim(file.path(working_dir,
paste(file_name, "_metadata.txt",
sep = "")))
metadata$cell_type1 <- metadata$clust_ident
metadata$clust_ident <- NULL
donors <- metadata$donor
timepoints <- metadata$day
gset <- read.table(file.path(working_dir, paste(file_name, "_norm.txt",
sep = "")),
stringsAsFactors = F)
features <- rownames(gset)
gset <- as.sparse(gset)
rownames(metadata)
colnames(gset) <- rownames(metadata)
metadata <- metadata$cell_type1
gsms <- c(0,0,1,0,1,0,1,1,1,1,1)
names(gsms) <- unique(metadata)
gsms <- gsms[metadata]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(as.data.frame(donors),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(as.data.frame(timepoints),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset, file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
#########################################################
############### Basal vs Club & its Lineage #############
#########################################################
condition <- metadata %in% c("basal.colonies", "basal.subconfluent", "basal.confluent", "p.basal", "secretory1", "secretory2")
save_name <- "gse134174_basal_vs_secretory"
unique(metadata[condition])
# group membership for all samples
# 0 (Basal): "basal.colonies", "basal.subconfluent", "basal.confluent", "p.basal"
# 1 (Secretory): "secretory1", "secretory2"
gsms <- c(0,0,1,0,1,0)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata[condition]
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(data.frame(donors = donors[condition]),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(data.frame(timepoints = timepoints[condition]),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset[, condition],
file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
#########################################################
#################### Basal vs Ciliated ##################
#########################################################
condition <- metadata %in% c("basal.colonies", "basal.subconfluent",
"basal.confluent", "p.basal", "ciliating.late",
"ciliated", "ciliating.early")
save_name <- "gse134174_basal_vs_ciliated"
unique(metadata[condition])
# group membership for all samples
# 0 (Basal): "basal.colonies", "basal.subconfluent", "basal.confluent", "p.basal"
# 1 (non Basal): "ciliating.late", "ciliated", "ciliating.early"
gsms <- c(0,0,0,0,1,1,1)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata[condition]
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(data.frame(donors = donors[condition]),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(data.frame(timepoints = timepoints[condition]),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset[, condition],
file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
condition <- metadata %in% c("basal.colonies", "basal.subconfluent",
"basal.confluent", "p.basal", "rare")
save_name <- "gse134174_basal_vs_rare"
unique(metadata[condition])
#########################################################
##################### Basal vs Rare #####################
#########################################################
condition <- metadata %in% c("basal.colonies", "basal.subconfluent",
"basal.confluent", "p.basal", "rare")
save_name <- "gse134174_basal_vs_rare"
# group membership for all samples
# 0 (Basal): "basal.colonies", "basal.subconfluent", "basal.confluent", "p.basal"
# 1 (Rare): "rare"
gsms <- c(0,0,0,0,1)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata[condition]
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(data.frame(donors = donors[condition]),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(data.frame(timepoints = timepoints[condition]),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset[, condition],
file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
#########################################################
################# Secretory vs Ciliated #################
#########################################################
condition <- metadata %in% c("secretory1", "secretory2",
"ciliating.late", "ciliated",
"ciliating.early")
save_name <- "gse134174_secretory_vs_ciliated"
unique(metadata[condition])
# group membership for all samples
# 0 (Secretory): "secretory1", "secretory2"
# 1 (Ciliated): "ciliating.late", "ciliated", "ciliating.early"
gsms <- c(0,0,1,1,1)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# group membership for all samples
# 0 (Basal): "Basal" and "Proliferating"
# 1 (Tuft): "Tuft"
gsms <- c(0, 0, 1)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata[condition]
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(data.frame(donors = donors[condition]),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(data.frame(timepoints = timepoints[condition]),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset[, condition],
file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
#########################################################
################### Secretory vs Rare ###################
#########################################################
condition <- metadata %in% c("secretory1", "secretory2", "rare")
save_name <- "gse134174_secretory_vs_rare"
# group membership for all samples
# 0 (Secretory): "secretory1", "secretory2"
# 1 (Rare): "rare"
gsms <- c(0, 0, 1)
unique(metadata[condition])
# group membership for all samples
# 0 (Secretory): "secretory1", "secretory2"
# 1 (Rare): "rare"
gsms <- c(0, 0, 1)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata[condition]
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(data.frame(donors = donors[condition]),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(data.frame(timepoints = timepoints[condition]),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset[, condition],
file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
#########################################################
#################### Ciliated vs Rare ###################
#########################################################
condition <- metadata %in% c("ciliating.late", "ciliated",
"ciliating.early", "rare")
save_name <- "gse134174_ciliated_vs_rare"
unique(metadata[condition])
# group membership for all samples
# 0 (Ciliated): "ciliating.late", "ciliated", "ciliating.early"
# 1 (Rare): "rare"
gsms <- c(0, 1, 0, 0)
names(gsms) <- unique(metadata[condition])
gsms <- gsms[metadata[condition]]
gsms <- paste0(gsms, collapse = "")
sml <- strsplit(gsms, split = "")[[1]]
# save subtypes
subtypes <- metadata[condition]
write.table(as.data.frame(subtypes),
file = file.path(working_dir, paste(save_name, "_types.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save classes
classes <- as.numeric(sml)
write.table(as.data.frame(classes),
file = file.path(working_dir, paste(save_name, "_classes.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save feature names
write.table(as.data.frame(features),
file = file.path(working_dir, paste(save_name, "_feature_names.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save donors
write.table(data.frame(donors = donors[condition]),
file = file.path(working_dir, paste(save_name, "_donors.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save timepoints
write.table(data.frame(timepoints = timepoints[condition]),
file = file.path(working_dir, paste(save_name, "_timepoints.csv", sep = "")),
sep = ",", quote = FALSE, row.names = FALSE)
# save features data
rownames(gset) <- features
writeMM(gset[, condition],
file = file.path(working_dir, paste(save_name, "_matrix.mtx", sep = "")))
