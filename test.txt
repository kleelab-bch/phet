# ionocytes
clusters = pd.read_csv(os.path.join(RESULT_PATH, "pulseseq_ionocyte_rdiffiqr_clusters.csv"), sep=',')
clusters = clusters["Cluster"].to_numpy()
group1 = np.where(clusters == 1)[0]
group2 = np.where(clusters == 2)[0]
list_features = pd.read_csv(os.path.join(DATASET_PATH, "pulseseq_ionocyte_rdiffiqr_post_features.csv"), sep=',',
index_col="ID")
temp = [feature for feature in list_features.index.to_list() if str(feature) in features_name]
list_features = list_features.loc[temp]
list_features = list_features[list_features["adj.P.Val"] <= pvalue].index.to_list()[:200]
list_features_idx = np.array([idx for idx, feature in enumerate(features_name) if feature in list_features])
list_features = [feature for idx, feature in enumerate(features_name) if feature in list_features]

df = pd.DataFrame(X[np.concatenate([group1, group2])][:, list_features_idx], columns=list_features, index=np.concatenate([group1, group2]))
df = zscore(df)
plt.figure(figsize=(10, 14))
cg = sns.clustermap(df.T, col_cluster=False, cbar_pos=(.95, .08, .03, .7), cmap=sns.diverging_palette(220, 20, as_cmap=True))
cg.ax_row_dendrogram.set_visible(False)
cg.ax_col_dendrogram.set_visible(True)
cg.ax_cbar.tick_params(labelsize=16)
cg.ax_cbar.set_ylabel('Standardized Expressions', fontsize=16)
cg.ax_heatmap.set_yticklabels(cg.ax_heatmap.get_ymajorticklabels(), fontsize=16)
cg.ax_heatmap.set_xticklabels(cg.ax_heatmap.get_xmajorticklabels(), fontsize=16)
ax = cg.ax_heatmap
ax.set_xlabel('Samples', fontsize=16)
ax.set_ylabel('Features', fontsize=16)
ax.yaxis.set_label_position("left")
ax.yaxis.tick_left()

# cross-check with basal features
basal_features = pd.read_csv(os.path.join(DATASET_PATH, "pulseseq_features.csv"), sep=',')
basal_features = basal_features["Basal"].dropna(axis=0).to_list()
clusters = pd.read_csv(os.path.join(RESULT_PATH, "pulseseq_ionocyte_markers_clusters.csv"), sep=',')
clusters = clusters["Cluster"].to_numpy()
group1 = np.where(clusters == 1)[0]
group2 = np.where(clusters == 2)[0]
list_features = pd.read_csv(os.path.join(DATASET_PATH, "pulseseq_ionocyte_post_features.csv"), sep=',',
index_col="ID")
temp = [feature for feature in list_features.index.to_list() if str(feature) in features_name]
list_features = list_features.loc[temp]
list_features = list_features[list_features["adj.P.Val"] <= pvalue].index.to_list()
list_features_idx = np.array([idx for idx, feature in enumerate(features_name) if (feature in list_features and feature in basal_features)])
list_features = [feature for idx, feature in enumerate(features_name) if (feature in list_features and feature in basal_features)]
df = pd.DataFrame(X[np.concatenate([group1, group2])][:, list_features_idx], columns=list_features, index=np.concatenate([group1, group2]))
df = zscore(df)
plt.figure(figsize=(10, 14))
cg = sns.clustermap(df.T, col_cluster=False, cbar_pos=(.95, .08, .03, .7), cmap=sns.diverging_palette(220, 20, as_cmap=True))
cg.ax_row_dendrogram.set_visible(False)
cg.ax_col_dendrogram.set_visible(True)
cg.ax_cbar.tick_params(labelsize=16)
cg.ax_cbar.set_ylabel('Standardized Expressions', fontsize=16)
cg.ax_heatmap.set_yticklabels(cg.ax_heatmap.get_ymajorticklabels(), fontsize=16)
cg.ax_heatmap.set_xticklabels(cg.ax_heatmap.get_xmajorticklabels(), fontsize=16)
ax = cg.ax_heatmap
ax.set_xlabel('Samples', fontsize=16)
ax.set_ylabel('Features', fontsize=16)
ax.yaxis.set_label_position("left")
ax.yaxis.tick_left()