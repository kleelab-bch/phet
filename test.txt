normalize = "zcore"
q = 0.75
iqr_range = (25, 75)
num_subsamples = 1000
subsampling_size = 3
significant_p: float = 0.05
partition_by_anova = False
num_components = 10
num_subclusters = 10
binary_clustering = True
feature_weight = [0.4, 0.3, 0.2, 0.1]
criterion = 'entropy'
max_features="sqrt"
max_depth = 3
min_samples_split = 2
num_epochs = 10
num_rounds = 50
calculate_pval = False
num_jobs = 4
partition_data = False
control_class = 0
case_class = 1

standardize=True
num_neighbors = 15
min_dist = 0
cluster_type = "spectral"
num_clusters = 0
suptitle=stat_name.upper()
file_name=file_name + "_" + stat_name.lower()
save_path=RESULT_PATH

df = pd.read_excel(os.path.join(DATASET_PATH, "SupTab3_Consensus_Sigs.xlsx")).replace(np.nan, -1)
marker_genes = list(set([item for item in df.to_numpy().flatten() if item != -1]))
df[["Basal"]].replace(-1, np.nan).dropna(axis=0)

# KS test

sample_size = 1000

# complete change
control = np.random.normal(loc=1, scale=1, size=sample_size)
case = np.random.normal(loc=2, scale=1, size=sample_size)
complete_change = ks_2samp(control, case)[1]

# majority change
control = np.random.normal(loc=1, scale=1, size=sample_size)
case = np.random.normal(loc=1, scale=1, size=sample_size)
majority_ids = np.random.choice(range(sample_size), size=int(sample_size * 0.7), replace=False)
case[majority_ids] += np.random.normal(loc=0, scale=1, size=len(majority_ids))
majority_change = ks_2samp(control, case)[1]

# minority change
control = np.random.normal(loc=1, scale=1, size=sample_size)
case = np.random.normal(loc=1, scale=1, size=sample_size)
minority_ids = np.random.choice(range(sample_size), size=int(sample_size * 0.3), replace=False)
case[minority_ids] += np.random.normal(loc=0, scale=1, size=len(minority_ids))
minority_change = ks_2samp(control, case)[1]

# print
complete_change, majority_change, minority_change

# boxplot
idx = 0
clusters = pd.read_csv(os.path.join(RESULT_PATH, "pulseseq_ionocyte_rdiffiqr_clusters.csv"), sep=',')
clusters = clusters["Cluster"].to_numpy()
features = list()
for cluster_idx in np.unique(clusters):
    temp = np.where(clusters == cluster_idx)
    temp = np.argsort(-X[temp].sum(1))[:50]
    features.extend(temp)
features = np.unique(features)
nonzeros = np.nonzero(X[:, features[idx]])[0]
sns.boxplot(x=clusters[nonzeros], y=X[nonzeros][:, features[idx]], palette='tab10')
sns.swarmplot(x=clusters[nonzeros], y=X[nonzeros][:, features[idx]], color='black')
plt.suptitle(features_name[features[idx]], fontsize=18, fontweight="bold")
sns.despine()


selected_features = np.nonzero(top_features_true)[0]
selected_features = selected_features[:200]
scaler = MinMaxScaler()
scaler.fit(X[:, selected_features])
temp_X = scaler.transform(X[:, selected_features])
temp = np.where(y == 0)
df0 = pd.DataFrame(temp_X[temp])
df0.columns = np.array(features_name)[selected_features]
temp = np.where(y == 1)
df1 = pd.DataFrame(temp_X[temp])
df1.columns = np.array(features_name)[selected_features]
sns.heatmap(df0, xticklabels=False, yticklabels=False, cbar=False, cmap=sns.color_palette("rocket_r", as_cmap=True))
# sns.heatmap(df1, xticklabels=False, yticklabels=False, cbar=False, cmap=sns.color_palette("rocket_r", as_cmap=True))


# ionocytes
clusters = pd.read_csv(os.path.join(RESULT_PATH, "pulseseq_ionocyte_rdiffiqr_clusters.csv"), sep=',')
clusters = clusters["Cluster"].to_numpy()
group1 = np.where(clusters == 1)[0]
group2 = np.where(clusters == 2)[0]
list_features = pd.read_csv(os.path.join(DATASET_PATH, "pulseseq_ionocyte_rdiffiqr_post_features.csv"), sep=',',
index_col="ID")
temp = [feature for feature in list_features.index.to_list() if str(feature) in features_name]
list_features = list_features.loc[temp]
list_features = list_features[list_features["adj.P.Val"] <= pvalue].index.to_list()[:200]
list_features_idx = np.array([idx for idx, feature in enumerate(features_name) if feature in list_features])
list_features = [feature for idx, feature in enumerate(features_name) if feature in list_features]

df = pd.DataFrame(X[np.concatenate([group1, group2])][:, list_features_idx], columns=list_features, index=np.concatenate([group1, group2]))
df = zscore(df)
plt.figure(figsize=(10, 14))
cg = sns.clustermap(df.T, col_cluster=False, cbar_pos=(.95, .08, .03, .7), cmap=sns.diverging_palette(220, 20, as_cmap=True))
cg.ax_row_dendrogram.set_visible(False)
cg.ax_col_dendrogram.set_visible(True)
cg.ax_cbar.tick_params(labelsize=16)
cg.ax_cbar.set_ylabel('Standardized Expressions', fontsize=16)
cg.ax_heatmap.set_yticklabels(cg.ax_heatmap.get_ymajorticklabels(), fontsize=16)
cg.ax_heatmap.set_xticklabels(cg.ax_heatmap.get_xmajorticklabels(), fontsize=16)
ax = cg.ax_heatmap
ax.set_xlabel('Samples', fontsize=16)
ax.set_ylabel('Features', fontsize=16)
ax.yaxis.set_label_position("left")
ax.yaxis.tick_left()

# cross-check with basal features
basal_features = pd.read_csv(os.path.join(DATASET_PATH, "pulseseq_features.csv"), sep=',')
basal_features = basal_features["Basal"].dropna(axis=0).to_list()
clusters = pd.read_csv(os.path.join(RESULT_PATH, "pulseseq_ionocyte_markers_clusters.csv"), sep=',')
clusters = clusters["Cluster"].to_numpy()
group1 = np.where(clusters == 1)[0]
group2 = np.where(clusters == 2)[0]
list_features = pd.read_csv(os.path.join(DATASET_PATH, "pulseseq_ionocyte_post_features.csv"), sep=',',
index_col="ID")
temp = [feature for feature in list_features.index.to_list() if str(feature) in features_name]
list_features = list_features.loc[temp]
list_features = list_features[list_features["adj.P.Val"] <= pvalue].index.to_list()
list_features_idx = np.array([idx for idx, feature in enumerate(features_name) if (feature in list_features and feature in basal_features)])
list_features = [feature for idx, feature in enumerate(features_name) if (feature in list_features and feature in basal_features)]
df = pd.DataFrame(X[np.concatenate([group1, group2])][:, list_features_idx], columns=list_features, index=np.concatenate([group1, group2]))
df = zscore(df)
plt.figure(figsize=(10, 14))
cg = sns.clustermap(df.T, col_cluster=False, cbar_pos=(.95, .08, .03, .7), cmap=sns.diverging_palette(220, 20, as_cmap=True))
cg.ax_row_dendrogram.set_visible(False)
cg.ax_col_dendrogram.set_visible(True)
cg.ax_cbar.tick_params(labelsize=16)
cg.ax_cbar.set_ylabel('Standardized Expressions', fontsize=16)
cg.ax_heatmap.set_yticklabels(cg.ax_heatmap.get_ymajorticklabels(), fontsize=16)
cg.ax_heatmap.set_xticklabels(cg.ax_heatmap.get_xmajorticklabels(), fontsize=16)
ax = cg.ax_heatmap
ax.set_xlabel('Samples', fontsize=16)
ax.set_ylabel('Features', fontsize=16)
ax.yaxis.set_label_position("left")
ax.yaxis.tick_left()